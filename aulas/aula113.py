"""
Polimorfismo em Python Orientado a Objetos

Polimorfismo √© o princ√≠pio que permite que classes deridavas de uma mesma superclasse tenham m√©todos iguais (com mesma assinatura) mas comportamentos diferentes.
    -> Assinatura do m√©todo = Mesmo nome e quantidade de par√¢metros

SO|->L<-|ID
Princ√≠pio da substitui√ß√£o de Liskov
    -> Objetos de uma superclasse devem ser substitu√≠veis por objetos de uma subclasse sem quebrar a aplica√ß√£o.
    
    * Sobrecarga de m√©todos (overload)  üêç = ‚ùå
    * Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
"""

from abc import ABC, abstractmethod


class Notificacao:
    def __init__(self, mensagem):
        self._mensagem = mensagem
        
    @property
    def mensagem(self):
        return self._mensagem
    
    @abstractmethod
    def enviar(self) -> bool: ...
    
    
class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        try: 
            print(f'E-MAIL -> Notifica√ß√£o: {self.mensagem}')
            return True
        except Exception as error:
            print(f'ERRO -> {error.__class__.__name__}: {error}')
            return False
        
        
class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        try:
            print(f'SMS -> Notifica√ß√£o: {self.mensagem}')
            return True
        except Exception as error:
            print(f'ERRO -> {error.__class__.__name__}: {error}')
            return False
        
        
def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()
    print('Notifica√ß√£o enviada com sucesso!' if notificacao_enviada else 'Notifica√ß√£o N√ÉO enviada!')
    
    
notificar(NotificacaoEmail('Testando E-MAIL...'))
notificar(NotificacaoSMS('Testando SMS...'))
